#include <iostream>
#include <raylib.h>
#include <string>

using namespace std;

struct Jugador {
    string nombre;
    int puntaje;
};

Jugador jugadores[3];

Color Green = Color{38, 185, 154, 255};
Color Dark_Green = Color{20, 160, 133, 255};
Color Light_Green = Color{129, 204, 184, 255};
Color Yellow = Color{243, 213, 91, 255};

int player_score = 0;
int cpu_score = 0;

class Ball
{
public:
    float x, y;
    int speed_x, speed_y;
    int radius;

    void Draw()
    {
        DrawCircle(x, y, radius, Yellow);
    }

    void Update()
    {
        x += speed_x;
        y += speed_y;

        if (y + radius >= GetScreenHeight() || y - radius <= 0)
        {
            speed_y *= -1;
        }
        if (x + radius >= GetScreenWidth()) // cpu wins
        {
            cpu_score++;
            ResetBall();
        }

        if (x - radius <= 0) // player wins
        {
            player_score++;
            ResetBall();
        }
    }

    void ResetBall()
    {
        x = GetScreenWidth() / 2;
        y = GetScreenHeight() / 2;

        int speed_choices[2] = {-1, 1};
        speed_x *= speed_choices[GetRandomValue(0, 1)];
        speed_y *= speed_choices[GetRandomValue(0, 1)];
    }
};

class Paddle
{
protected:
    void LimitMovement()
    {
        if (y <= 0)
        {
            y = 0;
        }
        if (y + height >= GetScreenHeight())
        {
            y = GetScreenHeight() - height;
        }
    }

public:
    float x, y;
    float width, height;
    int speed;

    void Draw()
    {
        DrawRectangleRounded(Rectangle{x, y, width, height}, 0.8, 0, WHITE);
    }

    void Update()
    {
        if (IsKeyDown(KEY_UP))
        {
            y = y - speed;
        }
        if (IsKeyDown(KEY_DOWN))
        {
            y = y + speed;
        }
        LimitMovement();
    }
};

class CpuPaddle : public Paddle
{
public:
    void Update(int ball_y)
    {
        if (y + height / 2 > ball_y)
        {
            y = y - speed;
        }
        if (y + height / 2 <= ball_y)
        {
            y = y + speed;
        }
        LimitMovement();
    }
};

Ball ball;
Paddle player;
CpuPaddle cpu;

void mostrarPuntajes()
{
    cout << "Puntajes:" << endl;
    for (int i = 0; i < 3; i++)
    {
        cout << "Jugador: " << jugadores[i].nombre << " - Puntaje: " << jugadores[i].puntaje << endl;
    }
}

void mostrarCreditos()
{
    cout << "Integrantes del grupo:" << endl;
    cout << "1. Integrante 1" << endl;
    cout << "2. Integrante 2" << endl;
    cout << "3. Integrante 3" << endl;
}

void mostrarMenu()
{
    cout << "Menu:" << endl;
    cout << "1. Jugar" << endl;
    cout << "2. Puntajes" << endl;
    cout << "3. Salir" << endl;
    cout << "4. Créditos" << endl;
    cout << "Seleccione una opción: ";
}

bool validarOpcion(int opcion)
{
    return opcion >= 1 && opcion <= 4;
}

int main()
{
    // Inicialización de jugadores
    for (int i = 0; i < 3; i++)
    {
        cout << "Ingrese el nombre del jugador " << i + 1 << ": ";
        cin >> jugadores[i].nombre;
        jugadores[i].puntaje = 0; // Inicializamos los puntajes en 0
    }

    int opcion;
    bool continuar = true;

    while (continuar)
    {
        mostrarMenu();
        cin >> opcion;

        if (!validarOpcion(opcion))
        {
            cout << "Opción inválida. Intente de nuevo." << endl;
            continue;
        }

        switch (opcion)
        {
        case 1:
            cout << "Iniciando el juego..." << endl;
            // Inicialización del juego
            {
                const int screen_width = 1280;
                const int screen_height = 800;
                InitWindow(screen_width, screen_height, "Ping Pong");
                SetTargetFPS(60);

                ball.radius = 20;
                ball.x = screen_width / 2;
                ball.y = screen_height / 2;
                ball.speed_x = 7;
                ball.speed_y = 7;

                player.width = 25;
                player.height = 120;
                player.x = screen_width - player.width - 10;
                player.y = screen_height / 2 - player.height / 2;
                player.speed = 6;

                cpu.height = 120;
                cpu.width = 25;
                cpu.x = 10;
                cpu.y = screen_height / 2 - cpu.height / 2;
                cpu.speed = 6;

                while (!WindowShouldClose())
                {
                    BeginDrawing();

                    // Updating
                    ball.Update();
                    player.Update();
                    cpu.Update(ball.y);

                    // Checking for collisions
                    if (CheckCollisionCircleRec(Vector2{ball.x, ball.y}, ball.radius, Rectangle{player.x, player.y, player.width, player.height}))
                    {
                        ball.speed_x *= -1;
                    }

                    if (CheckCollisionCircleRec(Vector2{ball.x, ball.y}, ball.radius, Rectangle{cpu.x, cpu.y, cpu.width, cpu.height}))
                    {
                        ball.speed_x *= -1;
                    }

                    // Drawing
                    ClearBackground(Dark_Green);
                    DrawRectangle(screen_width / 2, 0, screen_width / 2, screen_height, Green);
                    DrawCircle(screen_width / 2, screen_height / 2, 150, Light_Green);
                    DrawLine(screen_width / 2, 0, screen_width / 2, screen_height, WHITE);
                    ball.Draw();
                    cpu.Draw();
                    player.Draw();
                    DrawText(TextFormat("%i", cpu_score), screen_width / 4 - 20, 20, 80, WHITE);
                    DrawText(TextFormat("%i", player_score), 3 * screen_width / 4 - 20, 20, 80, WHITE);

                    EndDrawing();
                }

                CloseWindow();
            }
            break;
        case 2:
            mostrarPuntajes();
            break;
        case 3:
            continuar = false;
            break;
        case 4:
            mostrarCreditos();
            break;
        }
    }

    return 0;
}
